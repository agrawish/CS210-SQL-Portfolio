SQL Query from Murach's SQL Server for Developers 2016 figure 5-1 page 161
--This query displays the use of the COUNT function and the SUM function to add up invoices with a balnce due and the total due

SELECT COUNT(*) AS NumberOfInvoices,
  SUM(InvoiceTotal-PaymentTotal-CreditTotal) AS TotalDue
FROM Invoices
WHERE InvoiceTotal-PaymentTotal-CreditTotal >0;

--This query counts up how many invoices there are using the COUNT(*) funtion, only selecting rows with invoices
that have a balance due as specified in the WHERE clause, and displaying it in the column named with an alias NumberofInvoices.
Then it sums up all the balances due for invoices with a balance due and then displays that in the column with an alias Total Due.
This is all form the Invoices table.

----------Sample Output:
NumberOfInvoices	TotalDue
11	              32020.42

Augmented code:
Select COUNT(*) AS PaidInvoices 
from Invoices
where InvoiceTotal-PaymentTotal-CreditTotal = 0;

For changes I took off the summing of the balances and instead of counting up invoices with a balnce due, I counted 
up invoices where the Balance due is zero by making the where clause InvoiceTotal-PaymentTotal-CreditTotal = 0 not >0. 
I also change the column name giving it a different alias, namingit PaidInvoices to be more informative.

-----Augmented Sample Output: all rows
PaidInvoices
  103
____________________________________________________________________________________________________________________________________
SQL Query from Murach's SQL Server for Developers 2016 figure 5-2 page 163 a

--This query demonstrates the use of the count, avg, and sum function with a where clause, with all the info. representive for invoices 
--after September 1st 2015

SELECT 'After 9/1/2015' AS SelectionDate, COUNT(*) AS NumberOfInvoices,
    AVG(InvoiceTotal) AS AverageInvoiceAmount,
    SUM(InvoiceTotal) AS TotalInvoiceAmount
FROM Invoices
WHERE InvoiceDate > '2015-09-01';

This query will select all the rows that have an invoice date after September 1st 2015 and count up all the rows and name
the column containing that count with a column alias named NumberofInvoices. It also names a column with a column alias 
called SelectionDate putting the field "After 9/1/2015" in it to show that the results are for invoices after Septermber 1st 2015, 
which is also specified in the where clause. Furthermore, the result set shows the average invoice amount for invoices after 
Septermber 1st 2015 using the AVG function averaging the InvoiceTotal column and naming it the AverageInvoiceAmount column. 
Lastly, it sums up all the invoices' amount for invoices after Septmember 1st 2015 using the SUM function and puts the result 
in the column named TotalInvoiceAmount using an alias. This is all from the Invoices table. 

----------Sample Output: all rows
SelectionDate	  NumberOfInvoices	AverageInvoiceAmount	TotalInvoiceAmount
After 9/1/2015	    114	                1879.7413           	214290.51

----Augmented Code:
SELECT 'After 3/1/2016' AS SelectionDate, COUNT(*) AS NumberOfInvoices,
    AVG(InvoiceTotal) AS AverageInvoiceAmount,
    SUM(InvoiceTotal) AS TotalInvoiceAmount	
FROM Invoices
WHERE InvoiceDate > '2016-3-01';

The changes I made were changing the selection date to March 1st 2016 instead of Septmember 1st 2015 so now all the fields in the 
reuslt set such as the average invoice amount, the total invoice amount, and the number of invoices are all for invoices after 
March 1st 2016.

-----Augmented Sample Output:
SelectionDate	    NumberOfInvoices	AverageInvoiceAmount	TotalInvoiceAmount
After 3/1/2016	          34	            2739.102	            93129.47

_____________________________________________________________________________________________________________________________________
SQL Query from Murach's SQL Server for Developers 2016 figure 5-2 page 163 b

--this query shows the use of the count function, and the Min and Max fucntion to find the minimum and maximum invoice total 

SELECT 'After 9/1/2015' AS SelectionDate, COUNT(*) AS NumberOfInvoices,
    MAX(InvoiceTotal) AS HighestInvoiceTotal,
    MIN(InvoiceTotal) AS LowestInvoiceTotal
FROM Invoices
WHERE InvoiceDate > '2015-09-01';

This query names a column with a column alias as SelectionDate and puts the field "After 9/1/2015 to how that these results apply
to invices dated after September 1st 2015 (also shown by the where clause). The number of incoies is also selected, by the COUNT 
function and names the column with a column alias as NumberofInvoices. Then it uses the MAX function to find the maximum of the 
InvoiceTotal column and puts that value in a column named HighestInvoiceTotal using an alias. Similarily, the MIN function is 
used to find the minimum of the InvoiceTotal column and it puts that value in a column named with a alias, naming it LowestInvoiceTotal.
This is all form the Invoices table. it's important to note that the min and max values are only for invoices after Sept. 1st 2015

---------Sample Output: all rows
SelectionDate 	NumberOfInvoices	HighestInvoiceTotal	LowestInvoiceTotal
After 9/1/2015	      114	                37966.19	          6.00

Augmented Code:
SELECT 'After 9/1/2015' AS SelectionDate, COUNT(*) AS NumberOfInvoices,
    MAX(PaymentTotal) AS HighestPaymentTotal,
    MIN(PaymentTotal) AS LowestPaymentTotal
FROM Invoices
WHERE InvoiceDate > '2015-09-01';

-------Augmented Sample Output: all rows
SelectionDate	  NumberOfInvoices	HighestPaymentTotal	LowestPaymentTotal
After 9/1/2015	      114           	37966.19	            0.00

To change the query I took the Max and Min of a different column: of the PaymentTotal column instead of the InvoiceTotal column. 
I subsequently changed the column alias of the MAX to HighestPaymentTotal and changed that of the MIN to LowestPaymentTotal.
This showed me the highest and lowest payments instead of invoicetotals with the same date criteria. 
_____________________________________________________________________________________________________________________________________
SQL Query from Murach's SQL Server for Developers 2016 figure 5-2 page 163 c

--This query shows how to use the MIN and MAX fuctions columns that don't have number fields, and also uses the COUNT function

SELECT MIN(VendorName) AS FirstVendor,
    MAX(VendorName) AS LastVendor,
    COUNT(VendorName) AS NumberOfVendors
FROM Vendors;

This query selects the Minimum of the VendorName column with the MIN function and gives it the column alias FirstVendor and 
similarily selects the Maximum of the VendorName column with the MAX function and gives it the column alias LastVendor. 
These may seem out of place becuase they take the min and max of non-numeric fields. However, they work by finding the min and max
alphabetically, where the MIN represented the VendorName closest to A, and the MAX represents the VendorName closes to Z, since the
alphabet goes A to Z. Also, it selects the number of fields in the VendorName column and gives that column the alias NumberofVendors.
This is all form the Vendors table.

--------Sample output: all rows
FirstVendor	                LastVendor	      NumberOfVendors
Abbey Office Furnishings	  Zylka Design	          122

Augmented:
SELECT MIN(VendorName) AS FirstVendor,
    MAX(VendorName) AS LastVendor,
    COUNT(VendorName) AS NumberOfVendors
FROM Vendors
where VendorState <> 'CA'

I changed this query by adding a where clause to specify that I want the MIN, MAX, and COUNT functions to only apply to 
Vendors whose state is NOT CA, whereas the previous query looked at Vendors overall, with no reguards for whether the 
vendor came from a particular state or not.

Augmented Sample Output: all rows

FirstVendor	                      LastVendor	              NumberOfVendors
American Booksellers Assoc	    Zee Medical Service Co            	47

_____________________________________________________________________________________________________________________________________

SQL Query from Murach's SQL Server for Developers 2016 figure 5-4 page 167 a
--This query shows hwo to use the Group by clause and the Count function to determine the number of invoices per vendorID

SELECT VendorID, COUNT(*) AS InvoiceQty
FROM Invoices
GROUP BY VendorID;

Here the query selects the VendorID column and InvoiceQty column (which is derived from the Count fucntion)
from the Invoices table. The results are grouped by the
VendorID and since there is a Count function , the query determines (counts) how many invoices each vendorID has. For instance, 
vendorID number 34 has 2 invoices while number 37 has 3 invoices. 

--------Sample Output:
VendorID	InvoiceQty
34          	2
37	          3
48	          1
72	          2
80	          2
81	          1
82	          1
83	          2
86	          1
88	          1

Augmented:
SELECT InvoiceLineItems.AccountNo, COUNT(*) AS Quantity
FROM InvoiceLineItems
GROUP BY AccountNo;

I augmented this code by basically following the same structure but perfoming it for a different table: the InvocieLineItems
table. This would select the AccountNo column and use the Count(*) function to create the column named Quantity which would count
up the number of times a specific account number appears in the table. Then the group by clause would group the data by the AccountNo
so that the result set counts up how many Invoices per AccountNo.

----Augmented Sample Output:
AccountNo	Quantity
150       	1
160       	3
170       	1
400       	8
403	        8
507       	1
510	        3
520	        1
521	        1
522	        7
____________________________________________________________________________________________________________________________
SQL Query from Murach's SQL Server for Developers 2016 figure 5-3 page 165 a
--This query finds the average invoice amount for each VendorID if the Avgerage invoice amount is over 2000

SELECT VendorID, AVG(InvoiceTotal) AS AverageInvoiceAmount
FROM Invoices
GROUP BY VendorID
HAVING AVG(InvoiceTotal) > 2000
ORDER BY AverageInvoiceAmount DESC;

Thsi query selects the VendorID column and caluclates the average of the InvoiceTotal column (naming the column AverageInvoiceAmount)
all from the Invoices table. The results are grouped by VendorID so the average is calculated for each vendorID, taking all the
invoice amounts for one particular vendorID and finding their average. Then that is filtered by the HAVING clause so that only
those results are included that have an average invoice amount over 2000. Lastly, the result set is ordered with the average 
invoice amount highest to lowest.

------Sample Output:
VendorID	AverageInvoiceAmount
    110   	23978.482
    72	    10963.655
    104   	7125.34
    99	    6940.25
    119   	4901.26
    122   	2575.3288
    86	    2433.00
    100   	2184.50
    
    Augmented:
    SELECT VendorID, AVG(InvoiceTotal) AS AverageInvoiceAmount
FROM Invoices
GROUP BY VendorID
HAVING AVG(InvoiceTotal) > 5000
ORDER BY AverageInvoiceAmount DESC;

To change this query I just changed the HAVING clause to HAVING AVG(InvoiceTotal) > 5000 instead of 2000, so now only those reuslts
are included where the average invoice amount is over 5000, not 2000. 

-----Augmented Sample Output:
VendorID	AverageInvoiceAmount
110	    23978.482
72	    10963.655
104   	7125.34
99	    6940.25
___________________________________________________________________________________________________________________________
SQL Query from Murach's SQL Server for Developers 2016 figure 5-4 page 167 b
--This query shows how to use the Group By clause to find the number of invoices and average invoice amount per city and joins 2 tables

SELECT VendorState, VendorCity, COUNT(*) AS InvoiceQty,
    AVG(InvoiceTotal) AS InvoiceAvg
FROM Invoices JOIN Vendors
    ON Invoices.VendorID = Vendors.VendorID
GROUP BY VendorState, VendorCity
ORDER BY VendorState, VendorCity;

This query selects the VendorState and VendorCity column from the Vendors table
and uses the Count function to count up the number of invoices per city/state
which makes up the column InvoiceQty 
(named with an alias). Then the column InvoiceAvg is selected (given a column alias) and defined by using the AVG function
finding the average of the InvoiceTotal column to find the average invoice amount per city/state. There is also an inner join 
with the Invoices and Vendors table, joining if the VendorID in both tables is the same. And of course, the Group by clause says to
group by the VendorState and VendorCity, so there is a row returned with the InvoiceQty and InvoiceAvg 
for both the VendorState and VendorCity for all of the states and cities that also match the condition.
Lastly, the data is ordered by the VendorState ascending first, and then ascending by the VendorCity
------Sample Output:
VendorState VendorCity	InvoiceQty	InvoiceAvg
AZ	          Phoenix	    1	            662.00
CA	          Fresno	    19	          1208.7457
CA	          Los Angeles	1	        503.20
CA	          Oxnard	    3	            188.00
CA          	Pasadena	  5	          196.12
CA	            Sacramento	7	        253.0014
CA            San Francisco	3	      1211.04
CA	            Turlock	    1	            95.00
CA	            Valencia	  1	          6940.25
DC	            Washington	1	        600.00

Augmented:
SELECT VendorState,  COUNT(*) AS InvoiceQty,
    AVG(InvoiceTotal) AS InvoiceAvg
FROM Invoices JOIN Vendors
    ON Invoices.VendorID = Vendors.VendorID
GROUP BY VendorState 
ORDER BY VendorState ;

To change this program, I wanted to see what would happen if you only grouped the result set by one column: the VendorState
and not the VendorCity. So I removed the VendorCity column from both the first line and from the group by clause. This now shows the 
number of invoices and average invoice amount for each VendorState, not for each city in each state. 

-------Augmented Sample Output:
VendorState	InvoiceQty	InvoiceAvg
AZ            	1	        662.00
CA	            40        936.3337
DC	              1	      600.00
MA	             1	      1367.50
MI	              7	      20259.96
NV	             10	      2536.246
OH	              3	      75.8933
PA	              2	      132.68
TN	             47	      93.1493
TX            	  2	      1077.21

_________________________________________________________________________________________________________________________
SQL Query from Murach's SQL Server for Developers 2016 figure 5-4 page 167 c
--This query uses the Count and Avg fucntion and the group by clause to determine the number of invoices and the invoice average 
only for those vendor city/state with at least 2 invoices after joining two tables

SELECT VendorState, VendorCity, COUNT(*) AS InvoiceQty,
    AVG(InvoiceTotal) AS InvoiceAvg
FROM Invoices JOIN Vendors
    ON Invoices.VendorID = Vendors.VendorID
GROUP BY VendorState, VendorCity
HAVING COUNT(*) >= 2
ORDER BY VendorState, VendorCity;

This query selects the VendorState and VendorCity columns from the Vendors table and uses the Count function to find the number
of invoices and the Avg function to find the average invoice amount for each state and city of the vendor. 
It named the column that counts up the invoices as InvoiceQty with an alias, and names the column that shows the average 
invoice total as InvoiceAvg, again, named with an alias. There is an inner join with
the Vendors and Invoices table based on if their VendorID match in both tables. The reuslts are then grouped by the VendorState
and VendorCity, meaning there is a InvoiceQty and InvoiceAvg returned for each city and state. Then the HAVING clause applies a filter
to that by only uncluding those rows where the InvoiceQty has a value of at least 2, meaning a VendorCity of a partucular state 
has at least 2 invoices, if not more. Then the rows are put in order ascending by the VendorState, and then ascending by the VendorCity

------Sample Output:
VendorState	VendorCity	  InvoiceQty	InvoiceAvg
CA	            Fresno	         19	    1208.7457
CA	            Oxnard	          3   	188.00
CA	            Pasadena	        5   	196.12
CA	            Sacramento	      7   	253.0014
CA	            San Francisco	    3    	1211.04
MI            	Ann Arbor	        5 	  23978.482
MI	            Auburn Hills    	2   	10963.655
NV	            Reno	            9   	2575.3288
OH	            Columbus	        2	    9.95
PA	            Philadelphia	    2   	132.68

Augmented:
SELECT VendorState, VendorCity, COUNT(*) AS InvoiceQty,
    AVG(InvoiceTotal) AS InvoiceAvg
FROM Invoices JOIN Vendors
    ON Invoices.VendorID = Vendors.VendorID
GROUP BY VendorState, VendorCity
HAVING COUNT(*) >= 5
ORDER BY VendorState, VendorCity;

I changed this program by showing what happens if I change the HAVING clause to having a count of at least 5. This would now
only show rows where the InvoiceQty column had at least a value of 5, meaning there has to be at least five invoices 
per VendorCity/State for the row to appear in the final result set.

----Augmented Sample Output: all rows
VendorState	VendorCity	InvoiceQty	InvoiceAvg
CA	Fresno	19	1208.7457
CA	Pasadena	5	196.12
CA	Sacramento	7	253.0014
MI	Ann Arbor	5	23978.482
NV	Reno	9	2575.3288
TN	Memphis	47	93.1493
________________________________________________________________________________________________________________________________
SQL Query from W3Schools : https://www.w3schools.com/sql/sql_groupby.asp
--This query selects the number of customers per country, using the Count and Group by clause to do so

SELECT COUNT(CustomerID), Country
FROM Customers
GROUP BY Country;

This query selects the Country column from the Customers table, and uses the Count function on the CustomerID column
to count up the number of rows in the CustomerID for each Country, as seen by the Group By clause, which says to group
the data by the Country column. Thsi finds out the number of customers per country

I believe the Expr1000 is a placeholder since that column is not given a name...if you give it a column alias, then it will be 
replaced by the column alias

Sample Output:
Expr1000   Country
3        Argentina 
2        Austria 
2        Belgium 
9        Brazil 
3        Canada 
2         Denmark 
2         Finland 
11        France 
11        Germany 
1         Ireland 
3        Italy 

Augmented:
SELECT COUNT(CustomerID), City
FROM Customers
GROUP BY City
Order by COUNT(CustomerID) DESC;

I changed this query by selecting the City column instead of the Country column , and grouping it by City instead of Country.
This now finds out the number of Customers per city (applies the Count function for the city) not for each country. Laslty, I 
ordered it descending by the the Count of Customers per city, so the cities with the most customers appear first. 
       
------Augmented Sample Output: first 9 rows
Expr1000 City
6 London 
5 México D.F. 
4 São Paulo 
3 Buenos Aires 
3 Madrid 
3 Rio de Janeiro 
2 Lisboa 
2 Nantes 
2 Paris 

____________________________________________________________________________________________________________________________
SQL Query from W3Schools : https://www.w3schools.com/sql/sql_groupby.asp
--This query performs a left join with two tabes and then finds the number of orders per shipper with the Count function and the group 
by clause

SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;

This query selects the ShipperName column from the Shippers column and selects the number of orders from the Orders table 
using the Count function on the OrderID column from the Orders table. This column is then named NumberofOrders. There is then 
a left join with the Orders and Shippers table, which will get all the ShipperName vales from the Shippers table since it is the
first table (and that is the column from the table we selected)
and joins the rows where the ShipperID matches in both tables. This is then grouped by the ShipperName, so the 
number of orders is returned for each ShipperName 

-----Sample Output: 
ShipperName  NumberOfOrders
Federal Shipping  68 
Speedy Express   54 
United Package  74 

Augmented:
SELECT Shippers.ShipperName,COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders
LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName
Order by COUNT(Orders.OrderID) DESC ;

I changed this by adding an Order by clause to order the result set descending by the NumberofOrders column, 
also known as (COUNT(Orders.OrderID) DESC), which is what you have to write because you can't order the dataset by using the alias.
So now the ShipperName with the most orders appears first.

Augmented Sample Output:
ShipperName   NumberOfOrders
United Package    74 
Federal Shipping  68 
Speedy Express    54 

______________________________________________________________________________________________________________________




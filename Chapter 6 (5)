SQL Query from Murach's SQL Server 2016 for Developers figure 6-1 A page 185

--This query shows how to use a subquery as a search condition within the overall query as a way to simplify the query potentially

SELECT InvoiceNumber, InvoiceDate, InvoiceTotal
FROM Invoices
WHERE InvoiceTotal > 
    (SELECT AVG(InvoiceTotal)
     FROM Invoices)
ORDER BY InvoiceTotal;

This query selects the InvoiceNumber, InvoiceDate, and Invoicetotal columns from the Invocies table. The search condition in
the where clause is subsituted with another query (a subquery). The subquery selects the average of the InvoiceTotal column of
the Invoices table. So when put together in the where clause, it means the result set will only include rows where the InvoiceTotal 
is greater than the average InvoiceTotal. Then the results are put in order ascending by the InvoiceTotal.

----Sample Output:
InvoiceNumber	InvoiceDate	InvoiceTotal
989319-487	2016-02-20 00:00:00	1927.54
97/522	2016-02-28 00:00:00	1962.13
989319-417	2016-03-23 00:00:00	2051.59
989319-427	2016-02-16 00:00:00	2115.81
989319-477	2016-02-08 00:00:00	2184.11
587056	2016-02-28 00:00:00	2184.50
989319-497	2016-02-12 00:00:00	2312.20
989319-467	2016-03-01 00:00:00	2318.03
367447	2016-02-11 00:00:00	2433.00
989319-437	2016-02-01 00:00:00	2765.36

Augmented: 
SELECT InvoiceNumber, InvoiceDate, InvoiceTotal
FROM Invoices
WHERE InvoiceTotal <
    (SELECT AVG(InvoiceTotal)
     FROM Invoices)
ORDER BY InvoiceTotal;

I augmented this code by chnaging the greater than to a less than so now only those rows where the InvoiceTotal is less than the average
InvoiceTotal will be included in the final result set. 

------Augmented Sample Ouput:
InvoiceNumber	InvoiceDate	InvoiceTotal
25022117	2016-01-01 00:00:00	6.00
24863706	2016-01-10 00:00:00	6.00
24780512	2016-02-22 00:00:00	6.00
21-4923721	2016-01-13 00:00:00	9.95
21-4748363	2016-01-03 00:00:00	9.95
4-321-2596	2016-01-05 00:00:00	10.00
4-342-8069	2016-01-14 00:00:00	10.00
43966316	2016-02-22 00:00:00	10.00
4-314-3057	2016-02-11 00:00:00	13.75
963253251	2015-12-16 00:00:00	15.50

_______________________________________________________________________________________________________________________________
SQL Query from Murach's SQL Server 2016 for Developers figure 6-2 A page 187
--This query selects vendors common to two tables from the same state using a subquery and the IN operator to do so

SELECT InvoiceNumber, InvoiceDate, InvoiceTotal
FROM Invoices
WHERE VendorID IN
    (SELECT VendorID
    FROM Vendors
    WHERE VendorState = 'CA')
ORDER BY InvoiceDate;


This can be rewritten as an inner join (187)

This query selects the InvoiceNumber, InvoiceDate, and InvoiceTotal columns from the Invoices table. Then the where clause 
has a subquery. The subquery selects VendorID's for Vendors with their corresponding VendorState as CA. The where clause also has an
IN operator where if the VendorID matches those vendorID's selected by the subquery, then those rows with those VendorID's are
selected for the final reuslt set. Then the result is ordered by InvoiceDate oldest to newest.

------Sample Output:
InvoiceNumber	InvoiceDate	InvoiceTotal
125520-1	2015-12-24 00:00:00	95.00
97/488	2015-12-24 00:00:00	601.95
111-92R-10096	2015-12-30 00:00:00	16.33
25022117	2016-01-01 00:00:00	6.00
P02-88D77S7	2016-01-03 00:00:00	856.92
QP58872	2016-01-07 00:00:00	116.54
24863706	2016-01-10 00:00:00	6.00
10843	2016-01-11 00:00:00	4901.26
77290	2016-01-13 00:00:00	1750.00
121897	2016-01-19 00:00:00	450.00

Augmented Code:

Select DefaultTermsID, VendorName, VendorPhone 
from Vendors
where DefaultTermsID in
(Select termsID 
from Terms);

I augmented this code by writing a new code with almost the same structure just removing the where clause that was within the subquery.
I chose to Select the DefaultTermsID, VendorName, and VendorPhone columns form the Vendors table and then do basically an 
inner join with the DefaultTermsID and the termsID column from the  Vendors and Terms table. I had a subquery that would select 
the termsID from the Terms table and then the IN operator would basically select those rows where the termsID form the subquery 
matched the DefaultTermsID from the Vendors table.

------Augmented Sample Ouput:
DefaultTermsID	VendorName	VendorPhone
1	US Postal Service	(800) 555-1205
3	National Information Data Ctr	(301) 555-8950
3	Register of Copyrights	NULL
3	Jobtrak	(800) 555-8725
4	Newbrige Book Clubs	(800) 555-9980
3	California Chamber Of Commerce	(916) 555-6670
3	Towne Advertiser's Mailing Svcs	NULL
3	BFI Industries	(559) 555-1551
3	Pacific Gas & Electric	(800) 555-6081
2	Robbins Mobile Lock And Key	(559) 555-9375
_____________________________________________________________________________________________________________________________
SQL Query from Murach's SQL Server 2016 for Developers figure 6-3 A page 189
--This selects information for Vendors who do not show up in the Invoices table using the DISTINCT & NOT keyword and the IN operator

SELECT VendorID, VendorName, VendorState
FROM Vendors
WHERE VendorID NOT IN
    (SELECT DISTINCT VendorID
    FROM Invoices);
    
    This query selects the VendorID, VendorName, and VendorState columns from the Vendors table and then has a where clause with a 
    subquery in it. The subquery selects all the different VendorID's from the Invoices table. Then the where clause together will
    only include those rows in the result set if the VendorID from thr Vendors dosen't match the VendorID's selected by the subquery
    
-----Sample Ouput:
VendorID	VendorName	VendorState
1	US Postal Service	WI
2	National Information Data Ctr	DC
3	Register of Copyrights	DC
4	Jobtrak	CA
5	Newbrige Book Clubs	NJ
6	California Chamber Of Commerce	CA
7	Towne Advertiser's Mailing Svcs	CA
8	BFI Industries	CA
9	Pacific Gas & Electric	CA
10	Robbins Mobile Lock And Key	CA

Augmented:
SELECT VendorID, VendorName, VendorState
FROM Vendors
WHERE VendorID NOT IN
    (SELECT DISTINCT VendorID
    FROM Invoices)
Order by VendorState;

 I augmented this code by adding an order by clause to order the result set by the VendorState column ascending.

-----Augmented Sample Output:
VendorID	VendorName	VendorState
68	Computer Library	AZ
93	AT&T	AZ
98	American Express	CA
101	California Business Machines	CA
109	Kent H Landsberg Co	CA
111	Net Asset, Llc	CA
112	Office Depot	CA
116	State of California	CA
118	Unocal	CA
120	Dataforms/West	CA

___________________________________________________________________________________________________________________________

SQL Query from Murach's SQL Server 2016 for Developers figure 6-5 A page 193
--This query will retrieve vendors that are common to the Vendors and invoices table that have an invoicetotal higher than 
the largest InvoiceTotal for Vendor 34 using the ALL keyword and a subquery

SELECT VendorName, InvoiceNumber, InvoiceTotal
FROM Invoices JOIN Vendors ON Invoices.VendorID = Vendors.VendorID
WHERE InvoiceTotal > ALL
    (SELECT InvoiceTotal
    FROM Invoices
    WHERE VendorID = 34)
ORDER BY VendorName;

This query selects the VendorName column from the Vendors table
and the InvoiceNumber and InvoiceTotal columns form the Invoices table and performs an inner join between the two tables based on
the VendorID. If the VendorID is the same in both the tables, then those rows are selected. Then the subquery in the where clause 
will select the InvoiceTotal's for Vendor 34 from the Invoices table. The ALL keyword makes it so that only rows that have 
InvoiceTotal's higher than the largest InvoiceTotal selected by the subquery are included in the final result set. 

Augmented:
SELECT VendorName, InvoiceNumber, InvoiceTotal, Invoices.VendorID
FROM Invoices JOIN Vendors ON Invoices.VendorID = Vendors.VendorID
WHERE InvoiceTotal > ALL
    (SELECT InvoiceTotal
    FROM Invoices
    WHERE VendorID = 123)
ORDER BY VendorName;

I augmented this code by selecting one more column: the VendorID column from the Invoices table, and by changing the subquery
to where the VendorID is 123 and not 34, so now those vendors that are common to the Vendors and invoices table
that have an invoicetotal higher than the biggest InvoiceTotal for Vendor 123 are selected.

-----Augmeted Sample Output:
VendorName	InvoiceNumber	InvoiceTotal	VendorID
Bertelsmann Industry Svcs. Inc	509786	6940.25	99
Cahners Publishing Company	587056	2184.50	100
Computerworld	367447	2433.00	86
Data Reproductions Corp	40318	21842.00	72
Dean Witter Reynolds	75C-90227	1367.50	103
Digital Dreamworks	P02-3772	7125.34	104
Franchise Tax Board	RTR-72-3662-X	1600.00	107
Fresno County Tax Collector	P02-88D77S7	856.92	48
IBM	Q545443	1083.58	34
Ingram	31359783	1575.00	83

__________________________________________________________________________________________________________________________

SQL Query from Murach's SQL Server 2016 for Developers figure 6-6 A page 195
--This query will select info for vendors that are common to both the Invoices and Vendors table, joining those tables and 
including only those rows that have anInvoiceTotal less than the biggest InvoiceTotal for vendor 115

SELECT VendorName, InvoiceNumber, InvoiceTotal
FROM Vendors JOIN Invoices ON Vendors.VendorID = Invoices.VendorID
WHERE InvoiceTotal < ANY
    (SELECT InvoiceTotal
    FROM Invoices
    WHERE VendorID = 115);

This query selects the VendorName from the Vendors table and the InvoiceNumber and InvoiceTotal columns from the Invoices table.
Then the two tables are joined with an inner join, joining the rows where the VendorID is the same in both tables. Then there is a 
subquery that will select all the InvoiceTotals from the Invoices table for the Vendor with a VendorID of 115.Then the ANY keyword
in the where clause makes it so only those Vendors (common to both tables of course)
with the InvoiceTotals less than the largest InvoiceTotal selected by the 
subquery are included in the final result. So since the largest InvoiceTotal selected by the subquery was 25.67, the result set can
have any results with an InvoiceTotal smaller than 25.67

----Sample Output:
VendorName	InvoiceNumber	InvoiceTotal
Abbey Office Furnishings	203339-13	17.50
Pacific Bell	111-92R-10096	16.33
Pacific Bell	111-92R-10097	16.33
Pacific Bell	111-92R-10094	19.67
Compuserve	21-4923721	9.95
Compuserve	21-4748363	9.95
Roadway Package System, Inc	25022117	6.00
Roadway Package System, Inc	24863706	6.00
Roadway Package System, Inc	24780512	6.00
Suburban Propane	111897	16.62

Augmented:
SELECT VendorName, InvoiceNumber, InvoiceTotal
FROM Vendors JOIN Invoices ON Vendors.VendorID = Invoices.VendorID
WHERE InvoiceTotal > ANY
    (SELECT InvoiceTotal
    FROM Invoices
    WHERE VendorID = 115)
	Order by InvoiceTotal;

I augmented this by changing the < sign to a > sign so that now any Vendors that have an InvoiceTotal bigger than ANY of the
InvoiceTotals selected by the subquery are included in the final result set. And since the smallest InvoiceTotal selected by 
the subquery is 6.0, then those vendors common to both tables with an InvoiceTotal larger than 6.0 are included.

-----Augmented Sample Output:
VendorName	InvoiceNumber	InvoiceTotal
Compuserve			21-4748363	9.95
Compuserve			21-4923721	9.95
Federal Express Corporation	4-342-8069	10.00
Federal Express Corporation	4-321-2596	10.00
Federal Express Corporation	43966316	10.00
Federal Express Corporation	4-314-3057	13.75
Federal Express Corporation	963253251	15.50
Pacific Bell			111-92R-10096	16.33
Pacific Bell			111-92R-10097	16.33
Suburban Propane		111897		16.62
________________________________________________________________________________________________________________________________



SQL Query from Murach's SQL Server 2016 for Developers page 89 figure 3-2 #4

--This query demonstrates the use of the Between operator to retrieve data for invoices between two specific dates

SELECT InvoiceNumber, InvoiceDate, InvoiceTotal
FROM Invoices
WHERE InvoiceDate BETWEEN '2016-01-01' AND '2016-05-31'
ORDER BY InvoiceDate;

/*This query selects the Invoicenumber, InvoiceDate, and InvoiceTotal from the Invoices table only including those results 
where the dates fall between January 1st 2016 and May 31st 2016. The reuslts are them placed in order by the date: earliest to latest

------Sample Output: (first ten rows)
InvoiceNumber	InvoiceDate	InvoiceTotal
25022117	2016-01-01 00:00:00	6.00
P02-88D77S7	2016-01-03 00:00:00	856.92
21-4748363	2016-01-03 00:00:00	9.95
4-321-2596	2016-01-05 00:00:00	10.00
963253242	2016-01-06 00:00:00	104.00
QP58872	2016-01-07 00:00:00	116.54
24863706	2016-01-10 00:00:00	6.00
10843	2016-01-11 00:00:00	4901.26
963253235	2016-01-11 00:00:00	108.25
21-4923721	2016-01-13 00:00:00	9.95

Augmented Code:

SELECT InvoiceNumber, InvoiceDate, InvoiceTotal
FROM Invoices
WHERE InvoiceDate >= '2016-01-01' OR InvoiceDate<= '2016-05-31'
ORDER BY InvoiceDate;

I changed this program in the where clause by replacing the Between operator with an AND statement to get data from between the 
same dates. I used the greater than or equal to operator to make sure I get dates that start at the earliest January 1st 2016
and then used the less than or equal to operator to get dates that are at the latest May 31st 2016, with the AND showing it 
can be any date that falls between those two dates. This just shows another way to write the same thing. 

------Augmented Sample Output: (first ten rows)
InvoiceNumber	InvoiceDate	InvoiceTotal
25022117	2016-01-01 00:00:00	6.00
P02-88D77S7	2016-01-03 00:00:00	856.92
21-4748363	2016-01-03 00:00:00	9.95
4-321-2596	2016-01-05 00:00:00	10.00
963253242	2016-01-06 00:00:00	104.00
QP58872	2016-01-07 00:00:00	116.54
24863706	2016-01-10 00:00:00	6.00
10843	2016-01-11 00:00:00	4901.26
963253235	2016-01-11 00:00:00	108.25
21-4923721	2016-01-13 00:00:00	9.95

______________________________________________________________________________________________________________________________________

SQL Query from Murach's SQL Server 2016 for Developers page 99 figure 3-7 #3

--This query demonstrates the use of the GETDATE and DATEDIFF functions to calcuate the age of the Invoices 

SELECT InvoiceDate,
    GETDATE() AS 'Today''s Date',
    DATEDIFF(day, InvoiceDate, GETDATE()) AS Age
FROM Invoices;

/*This query selects the InvoiceDate column but has another column in the result set : Age. Age is determined by the difference 
in the numbe rof days between the InvoiceDate and today's date, which is a column alias determiend by the GETDATE function which 
get's today's date, which is why the column is named that. DATEDIFF is a fucntion that will return a value in days, shown by the first 
paremeter in the parenthesis, and it will be a result of the difference between the 2nd and 3rd paremeter (the date of the original
invoice and today's date). This is all done from the Invoices base table. An important thing to note is that this query will change
as the date changes, so today;s result is and will be different from tomarrow or next year's results. Also, since by default it 
takes the date as the date and 00:00 you should be careful when using this function to make sure ALL dates with different times
are included in the query as well (if thats what you wish)

Sample Output: 
InvoiceDate	          Today's Date	            Age
2016-04-02 00:00:00	  2019-11-04 00:30:29.960 	1311
2016-04-01 00:00:00	  2019-11-04 00:30:29.960	  1312
2016-03-31 00:00:00	  2019-11-04 00:30:29.960	  1313
2016-03-30 00:00:00	  2019-11-04 00:30:29.960	  1314
2016-03-28 00:00:00	  2019-11-04 00:30:29.960	  1316
2016-03-25 00:00:00	  2019-11-04 00:30:29.960	  1319
2016-03-24 00:00:00	  2019-11-04 00:30:29.960	  1320
2016-03-24 00:00:00	  2019-11-04 00:30:29.960	  1320
2016-03-24 00:00:00	  2019-11-04 00:30:29.960	  1320
2016-03-24 00:00:00	  2019-11-04 00:30:29.960	  1320

Augmented Code: 
SELECT InvoiceDate, (InvoiceTotal-PaymentTotal-CreditTotal) AS BalanceDue,
    GETDATE() AS 'Today''s Date',
    DATEDIFF(day, InvoiceDate, GETDATE()) AS Age
FROM Invoices
where InvoiceTotal-PaymentTotal-CreditTotal >0; 

/* I expanded the functionality of the program by adding in what the outstanding balance was so that we could see how old the
invoices were in days that still had a balnce due. So I used the calculation Murach uses repeatedly
((InvoiceTotal-PaymentTotal-CreditTotal) AS BalanceDue) to select that column as well and only include those rows 
in the result set where the BalanceDue was greater than zero (shown by the added where clause).

--------Augmented Sample Output: All 11 rows
 InvoiceDate	BalanceDue	Today's Date	Age
2016-03-10 00:00:00	85.31	2019-11-04 01:14:12.470	1334
2016-03-18 00:00:00	52.25	2019-11-04 01:14:12.470	1326
2016-03-21 00:00:00	579.42	2019-11-04 01:14:12.470	1323
2016-03-21 00:00:00	59.97	2019-11-04 01:14:12.470	1323
2016-03-22 00:00:00	67.92	2019-11-04 01:14:12.470	1322
2016-03-22 00:00:00	30.75	2019-11-04 01:14:12.470	1322
2016-03-23 00:00:00	19351.18	2019-11-04 01:14:12.470	1321
2016-03-24 00:00:00	503.20	2019-11-04 01:14:12.470	1320
2016-03-28 00:00:00	90.36	2019-11-04 01:14:12.470	1316
2016-03-31 00:00:00	10976.06	2019-11-04 01:14:12.470	1313
2016-04-01 00:00:00	224.00	2019-11-04 01:14:12.470	1312  
*/

________________________________________________________________________________________________________________________________

SQL Query from Murach's SQL Server 2016 for Developers page 97 figure 3-6 c

--This query shows how order of operations are a default and can be overriden by parentheses to get completely different values

SELECT InvoiceID,
    InvoiceID + 7 * 3 AS OrderOfPrecedence,
    (InvoiceID + 7) * 3 AS AddFirst
FROM Invoices
ORDER BY InvoiceID;

/*This query shows how the default order of operations gives some value for the InvoiceID after using it in calculations
while the same thing with parenthesus around the adding makes it give different values to the InvoiceID. With order of 
operations, multiplication takes precedence over adding and so if you have addition with it, you will not get the same value
as if you add firstad then multiply. This is all reguarding the InvoiceID from the Invoices table and places the result set 
in order by from the smallest to largest InvoiceID. 

-------Sample Output: First ten rows 
InvoiceID	OrderOfPrecedence	AddFirst
1	            22	                24
2	            23                 	27
3	            24              	30
4	            25	                33
5	            26	                36
6	            27	                39
7	            28	                42
8	            29	                45
9	            30	                48
10	            31	                51

Augmented Code:

SELECT InvoiceID,
    InvoiceID + 7 * 3 AS OrderOfPrecedence,
    (InvoiceID + 7) * 3 AS AddFirst,
	InvoiceID + 7 * 3 /5 AS OrderWithDivision
FROM Invoices
ORDER BY InvoiceID;

Here I added a column OrderWithDivision to show how having division changes the order of operations. Division takes precedence 
over multiplication so when I defined that column as InvoiceID + 7 * 3 /5 AS OrderWithDivision it meant that it would first 
do 3/5, then multiply that result to 7 and then add that result to the InvoiceID. If I did not want this I could put 
parenthesis to clarify what order I DID want it in.

Augmented Sampel Output : First ten rows
InvoiceID	OrderOfPrecedence	AddFirst	OrderWithDivision
1	            22	                24	                5
2	            23	                27	                6
3	            24	                30	                7
4	            25	                33	                8
5	            26	                36	                9
6	            27	                39	                10
7	            28	                42	                11
8	            29	                45	                12
9	            30	                48	                13
10	            31	                51	                14

__________________________________________________________________________________________________________________________________

SQL Query from Murach's SQL Server 2016 for Developers page 103 figure 3-9 a
--This query demonstrates the use of the TOP clause, showing it can retrieve a specific amount of rows from a result set

SELECT TOP 5 VendorID, InvoiceTotal
FROM Invoices
ORDER BY InvoiceTotal DESC;

----------Sample output (all rows) 
VendorID	InvoiceTotal
110         	37966.19
110         	26881.40
110         	23517.58
72          	21842.00
110         	20551.18

This query uses the TOP clause which just retrieves a set number of rows which is specified in this case to be 5. 
So it will select the top 5 rows from the Invoices table, selecting only the VendorID and InvoiceTotal columns and 
only after the the InvoiceTotal largest to smallest. Without the Order by, the query would not be as useful
becuase the rows would be mixed up and essentially would select 5 random rows after applying all the search conditions. 
This will give me the top five highest invoice totals. 

Augmented Code:

SELECT TOP 5 VendorID, InvoiceTotal
FROM Invoices
ORDER BY InvoiceTotal;

I changed the code by ordering the result set by the InvoiceTotal ascending instead of descending,
which will give me the five lowest invoice totals.
This shows the importance of the order by clause when using the TOP clause so that you get meaningful results. 

------Augmented Sample Output (all rows)
VendorID	InvoiceTotal
115	        6.00
115	        6.00
115     	6.00
97	        9.95
97	        9.95

_________________________________________________________________________________________________________________________________

SQL Query from Murach's SQL Server 2016 for Developers page 117 figure 3-16 a

--This query demonstrates a column that is defined by concatenating it with other columns

SELECT VendorName,
    VendorCity + ', ' + VendorState + ' ' + VendorZipCode AS Address
FROM Vendors
ORDER BY VendorName;

This query the column VendorName and the column Address which is derived from the columns VendorCity, Vendor State, and 
VendorZipCode which put otgether with a comma in between the first two columns and a space between the seconf and third columns
make up the address and thus the column named Address. This is all from the Vendors table and then the result set is ordered
in ascending order by the VendorName column. 

Sample Output: first ten rows
VendorName			Address
Abbey Office Furnishings	Fresno, CA 93722
American Booksellers Assoc	Tarrytown, NY 10591
American Express		Los Angeles, CA 90096
ASC Signs			Fresno, CA 93703
Ascom Hasler Mailing Systems	Shelton, CT 06484
AT&T				Phoenix, AZ 85062
Aztek Label			Anaheim, CA 92807
Baker & Taylor Books		Charlotte, NC 28217
Bertelsmann Industry Svcs. Inc	Valencia, CA 91355
BFI Industries			Fresno, CA 93792

Augmented:
SELECT VendorName,
    VendorCity + ', ' + VendorState + ' ' + VendorZipCode AS Address,
	VendorContactFName + ' ' + VendorContactLName AS ContactPerson
FROM Vendors
ORDER BY VendorName; 
(the added expression is from page 91)

I augmented this code by concetenating other columns as well to come up with a new column ContactPerson which 
concetenated the VendorContactFName with the VendorContactLName with a space in between representing the space 
between a contact person's first and last name to together form the ContactPerson. This way we see the Vendors, their
address, and now have a way to contact them. 

------Augmented Sample Output: First ten rows 
VendorName	Address	ContactPerson
Abbey Office Furnishings	Fresno, CA 93722	Kyra Francis
American Booksellers Assoc	Tarrytown, NY 10591	Nashalie Angelica
American Express	Los Angeles, CA 90096	Kirsten Story
ASC Signs	Fresno, CA 93703	Elisabeth Darien
Ascom Hasler Mailing Systems	Shelton, CT 06484	Darnell Lewis
AT&T	Phoenix, AZ 85062	Alisha Wesley
Aztek Label	Anaheim, CA 92807	Brian Griffin
Baker & Taylor Books	Charlotte, NC 28217	Brittnee Bernardo
Bertelsmann Industry Svcs. Inc	Valencia, CA 91355	Lance Potter
BFI Industries	Fresno, CA 93792	Erick Kaleigh


____________________________________________________________________________________________________________________________

SQL Query from Murach's SQL Server 2016 for Developers page 121 figure 3-18 b

--This query shows the OFFSET and FETCH NEXT clauses and how you can skip rows and then select how many to retrieve afterwards

Source Code:
SELECT VendorName, VendorCity, VendorState, VendorZipCode
FROM Vendors
WHERE VendorState = 'CA'
ORDER BY VendorCity
    OFFSET 10 ROWS	
    FETCH NEXT 10 ROWS ONLY;
    
    This query selects the VendorName, VendorCity, VendorState, and VendorZipCode columns from the Vendors table if the VendorState
    column has a field of 'CA' and then the query orders the result set by the VendorCity. Then it will OFFSET 10 rows meaning it 
    will skip the first ten rows of the query. Finally it says it will FETCH NEXT 10 ROWS ONLY meaning it will only have the next
    ten rows that come after skipping the first ten rows in the final result set. 
    
------Sample Output: 
    VendorName	VendorCity	VendorState	VendorZipCode
Robbins Mobile Lock And Key	Fresno	CA	93726
BFI Industries			Fresno	CA	93792
California Data Marketing	Fresno	CA	93721
Yale Industrial Trucks-Fresno	Fresno	CA	93706
Costco				Fresno	CA	93711
Graylift			Fresno	CA	93745
Shields Design			Fresno	CA	93728
Fresno County Tax Collector	Fresno	CA	93715
Gary McKeighan Insurance	Fresno	CA	93711
Ph Photographic Services	Fresno	CA	93726
    
    Augmented :  
    SELECT VendorName, VendorCity, VendorState, VendorZipCode
FROM Vendors
WHERE VendorState = 'CA'
ORDER BY VendorCity
    OFFSET 0 ROWS	
    FETCH NEXT 10 ROWS ONLY;
    (similar to the code on this page but the first one not the second)

I changed this by so that the result set dosent skip the first ten rows and insted chooses just the first ten rows.
The original query had an OFFSET 10 ROWS which meant it skipped the first ten rows, but mine has an OFFSET of 0, so 
the query does not skip any rows

------Augmented Sample Output:
 VendorName	VendorCity	VendorState	VendorZipCode
Blue Shield of California	Anaheim	CA	92850
Aztek Label			Anaheim	CA	92807
Diversified Printing & Pub	Brea	CA	92621
ASC Signs			Fresno	CA	93703
Expedata Inc			Fresno	CA	93726
City Of Fresno			Fresno	CA	93718
Bill Marvin Electric Inc	Fresno	CA	93703
Robbins Mobile Lock And Key	Fresno	CA	93726
BFI Industries			Fresno	CA	93792
Internal Revenue Service	Fresno	CA	93888   

_______________________________________________________________________________________________________________________________
Query from Murach's SQL Server 2016 for Developers page 119 figure 3-17 c

--This query shows how you can order columns by the position they take when selecting the columns instead of by their name

SELECT VendorName,
    VendorCity + ', ' + VendorState + ' ' + VendorZipCode AS Address
FROM Vendors
ORDER BY 2, 1;

This query shows a different way of ordering the result set, with the position of the columns instead of their names. Here the query
selects the column VendorName from the Vendors table, and then concatenated the columns VendorCity, VendorState, and VendorZipCode 
to give it the column alias Address. The data is ordered by 2,1 which means the second column first
(which here is the Address column, which was selected second ), and is then ordered by 1 (which means the first column selected, which 
here was the VendorName column). This is not a prefered method: not only is it harder to read, but it also depends on the order 
of the columns selected, so if those change, then your order by clause changes, making it harder to update the queries if needed.

Augmented:
SELECT VendorCity + ', ' + VendorState + ' ' + VendorZipCode AS Address,
VendorName
FROM Vendors
ORDER BY 2, 1;

This query was changed by changing the order of the columns selected, selecting the column named with an alias Address and then
selecting VendorName, but not changing the order by clause showing how if I change the order of the columns selected, it impacts the
query unless I change the Order by clause to 1,2. This shows how it is not optimal to order the columns this way, and 
instead to do it by the names, that way it won't matter if I change the column order when selecting the columns.

------Augmented Sample Output:
Address				VendorName
Fresno, CA 93722	Abbey Office Furnishings
Tarrytown, NY 10591	American Booksellers Assoc
Los Angeles, CA 90096	American Express
Fresno, CA 93703	ASC Signs
Shelton, CT 06484	Ascom Hasler Mailing Systems
Phoenix, AZ 85062	AT&T
Anaheim, CA 92807	Aztek Label
Charlotte, NC 28217	Baker & Taylor Books
Valencia, CA 91355	Bertelsmann Industry Svcs. Inc
Fresno, CA 93792	BFI Industries

____________________________________________________________________________________________________________________________________
Query from Murach's SQL Server 2016 for Developers page 101 figure 3-8 b

--This query shows how the DISTINCT keyword takes out duplicate rows to show only distinct values in the result set

SELECT DISTINCT VendorCity, VendorState
FROM Vendors;

This query selects the VendorCity and VendorState columns from the Vendors table. But instead of having all the different 
cities and states repeat, because they will, it uses the DISTINCT keyword to make sure we only get the different cities.
The cities will not repeat, however, the VendorState will because there are different cities in a state and we do not 
sepecify selecting the distinct states.

--------Sample Output:
VendorCity		VendorState
Anaheim			CA
Ann Arbor		MI
Auburn Hills		MI
Boston			MA
Brea			CA
Carol Stream		IL
Charlotte		NC
Chicago			IL	
Cincinnati		OH
Cleves			OH

Augmented Code:
Select DISTINCT InvoiceLineItemDescription
from InvoiceLineItems;

*To change this query I decided to show the use of the DISTINCT keyword by querying from a diffrent table: InvoiceLineItems 
instead of Vendors, selecting the InvoicelineItemDescription column. 
This now shows me all the different types of items that the invoices could be.  
The output now shows 10 different types of items

------Augmented Sample Output:
InvoiceLineItemDescription
401K Contributions
Address correction
Back office additions
Book copy
Book repro
Books for research
Bronco lease
Card deck
Card deck advertising
Card revision
_______________________________________________________________________________________________________________________________
Query from Murach's SQL Server 2016 for Developers page 111 figure 3-7 a
--This query demonstrates how to use the LEFT function to select the first letter of first and last names to create intitials
SELECT VendorContactFName, VendorContactLName,
    LEFT(VendorContactFName, 1) +
    LEFT(VendorContactLName, 1) AS Initials
FROM Vendors;

This query selects the VendorContactFName and VendorContactLName columns from the Vendors table. It also uses the LEFT function
on those two columns, specifying two parameters. The first is where the value is coming from (in this case either two columns)
and then specifys how many charcters it will retrieve (in this case 1). Then these two LEFT functions are concatenated together to
create a column named Initials. 

-----------Sample Output:
VendorContactFName	VendorContactLName	Initials
Francesco			Alberto		FA
Ania				Irvin		AI
Lukas				Liana		LL
Kenzie				Quinn		KQ
Michelle			Marks		MM
Anton				Mauro		AM
Ted				Maegen		TM
Erick				Kaleigh		EK
Kaitlyn				Anthoni		KA
Bill				Leigh		BL

Augmented Code:
SELECT FirstName, LastName,
    LEFT(FirstName, 1) +
    LEFT(LastName, 1) AS Initials
FROM ContactUpdates;

I augmented the code by applying the original query structure to a different table: ContactUpdates. I selected the 
FirstName and LastName columns, applyed the LEFT fucntion to those two columns selecting the first character from each of them 
and kept the column name the same (Initials). This then gave me the contact's full name and then their initials. 

Augmented Sample Ouput: all rows
FirstName	LastName	Initials
Michelle	Davison		MD
Kendall		Mayteh		KM
Bruce		Onandonga	BO
Anthony		Antavius	AA
Danny		Bradlee		DB
Reynaldo	Suscipe		RS
Geraldine	O'Sullivan	GO
Charles		Bucket		CB
_________________________________________________________________________________________________________________________





SQL Query from w3Schools https://www.w3schools.com/sql/func_mysql_upper.asp
--This query uses the UPPER function to convert some text to have all upper case letters

SELECT UPPER(CustomerName) AS UppercaseCustomerName
FROM Customers;

This query uses the UPPER function on the column CustomerName from the Customers table and uses a column 
alias to name that column as UppercaseCustomerName. Now all the customers' names are in all caps

-------Sample Output:
UppercaseCustomerName
ALFREDS FUTTERKISTE
ANA TRUJILLO EMPAREDADOS Y HELADOS
ANTONIO MORENO TAQUERÍA
AROUND THE HORN
BERGLUNDS SNABBKÖP
BLAUER SEE DELIKATESSEN
BLONDEL PÈRE ET FILS
BÓLIDO COMIDAS PREPARADAS
BON APP'
BOTTOM-DOLLAR MARKETSE

Augmented:
SELECT UPPER(FirstName) AS UppercaseEmployeeFirstName, UPPER(LastName) AS UppercaseEmployeeLastName
FROM Employees;

I augmented this code by applying this function in the same way to another table: the Employees table. So I applied the 
upper function to the FirstName and the LastName colums of the Employees table and selected those columns, naming then 
UppercaseEmployeeFirstName and 	UppercaseEmployeeLastName respectively with 2 column aliases

----Augmented Sample Output:
UppercaseEmployeeFirstName	UppercaseEmployeeLastName
NANCY                     	DAVOLIO
ANDREW                    	FULLER
JANET                     	LEVERLING
MARGARET	                  PEACOCK
STEVEN	                    BUCHANAN
MICHAEL                   	SUYAMA
ROBERT                    	KING
LAURA                     	CALLAHAN
ANNE                      	DODSWORTH

__________________________________________________________________________________________________________________________________
SQL Query from W3Schools https://www.w3schools.com/sql/func_sqlserver_len.asp
--This demonstrates the use of the LEN function to find the length of a specificied string

SELECT LEN('2017-08');
Ouput:
7

This code uses the LEN function on the string '2017-08' to calculate the legnth of it, which coms out to 7 as in the output

Augmented:
SELECT CustomerName, LEN(CustomerName) AS length
FROM Customers;

I used this LEN function on the Customers table to find the LENGTH of the CustomerName column from that table, which
was named length with a column alias. I also selected 
the CustomerName column to see the name of the customer along with it's calculated length side by side 

Augmented Sample Output:
CustomerName	length
Alfreds Futterkiste	19
Ana Trujillo Emparedados y helados	34
Antonio Moreno Taquería	23
Around the Horn	15
Berglunds snabbköp	18
Blauer See Delikatessen	23
Blondel père et fils	20
Bólido Comidas preparadas	25
Bon app	7
Bottom-Dollar Marketse	22

________________________________________________________________________________________________________________________________
SQL Query from W3Schools https://www.w3schools.com/sql/sql_like.asp
--This query shows the use of the LIKE operator to find Customers whose names start with the letter a

SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';

This query selects everything from the Customers table for those rows where the CustomerName column has values that start 
with a. The LIKE operator shows this as it will choose those names that start with a

-----Sample Output:
CustomerID CustomerName ContactName Address City PostalCode Country
1  Alfreds Futterkiste  Maria Anders  Obere Str. 57  Berlin  12209  Germany 
2  Ana Trujillo Emparedados y helados  Ana Trujillo  Avda. de la Constitución 2222  México D.F.  05021  Mexico 
3  Antonio Moreno Taquería  Antonio Moreno Mataderos 2312  México D.F.  05023  Mexico 
4  Around the Horn  Thomas Hardy  120 Hanover Sq.  London  WA1 1DP  UK 

Augmented Code:
SELECT * FROM Customers
WHERE CustomerName LIKE 'c%';

I changed this query by changing the pattern to look for. Instead of getting information for customer names that start
with a, now it is for those that start with c.

-----Augmented Sample Output:
CustomerID CustomerName ContactName Address City PostalCode Country
12  Cactus Comidas para llevar  Patricio Simpson  Cerrito 333  Buenos Aires  1010  Argentina 
13  Centro comercial Moctezuma  Francisco Chang  Sierras de Granada 9993  México D.F.  05022  Mexico 
14  Chop-suey Chinese  Yang Wang  Hauptstr. 29  Bern  3012  Switzerland 
15  Comércio Mineiro  Pedro Afonso  Av. dos Lusíadas, 23  São Paulo  05432-043  Brazil 
16  Consolidated Holdings  Elizabeth Brown  Berkeley Gardens 12 Brewery   London  WX1 6LT  UK 

_______________________________________________________________________________________________________________________________
SQL Query from w3Schools  https://www.w3schools.com/sql/sql_case.asp
--This query labels the quantities corresponding to the OrderID as either greater than 30, 30, or less than 30 using the
CASE statement

SELECT OrderID, Quantity,
CASE WHEN Quantity > 30 THEN "The quantity is greater than 30"
WHEN Quantity = 30 THEN "The quantity is 30"
ELSE "The quantity is under 30"
END AS QuantityText
FROM OrderDetails;

This query selects the OrderID and Quantity columns from the OrderDetails table. It also uses the CASE statement to label the
quantities as either greater than 30, 30, or under 30. For example, it first checks if the Quantity is greater than 30. If it is,
then the column named with an alias QuantityText gets the value ""The quantity is greater than 30" for that row with the Quantity 
over 30. SImilarily, if the Quantity is 30, then it gets the value "The Quantity is 30", and lastly, if none of those conditions are
the case, then the ELSE part comes in, having the column QuantityText get the value "The quantity is under 30" for that row with
the quantity not greater than or equal to 30. It then has the END keyword and proceedes to use a column alias QuantityText, which
was the column that received all these values based on the quantity.

Sample Output:
OrderID     Quantity        QuantityText
10248        12 The quantity is under 30
10248        10 The quantity is under 30
10248         5 The quantity is under 30
10249         9 The quantity is under 30
10249        40 The quantity is greater than 30
10250       10 The quantity is under 30
10250       35 The quantity is greater than 30
10250       15 The quantity is under 30

Augmented Code:
SELECT ProductID, ProductName, Price,
CASE WHEN Price > 100 THEN "Expensive"
WHEN Price> 25 AND Price<100 THEN "The price is somewhat expensive"
ELSE "Good Price"
END AS PriceText
FROM Products;

 To augment the code I basically followed the same structure of the code to apply to the Products table and the column Price
 (instead of Quantity). So here I check the Price of each product, and based on that , the column named with an alias Pricetext
 will be given the value "Expensive" , "The price is somewhat expensive", or "Good Price" for each product from the Products table
 For example, if the Price is greater than 25 but less then 100, then the column PriceText gets the value "The price is somewhat 
 expensive"
 
------Augmented Sample Output:
ProductID ProductName Price PriceText
1 Chais 18.00 Good Price
2 Chang 19.00 Good Price
3 Aniseed Syrup 10.00 Good Price
4 Chef Anton's Cajun Seasoning 22.00 Good Price
5 Chef Anton's Gumbo Mix 21.35 Good Price
6 Grandma's Boysenberry Spread 25.00 Good Price
7 Uncle Bob's Organic Dried Pears 30.00 The price is somewhat expensive
8 Northwoods Cranberry Sauce 40.00 The price is somewhat expensive

___________________________________________________________________________________________________________________________________
SQL Query from W3Schools https://www.w3schools.com/sql/sql_between.asp
--This query selects those rows with all the columns from the Products table if the price is between 10 and 20, using the BETWEEN oper.

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

This query selects everything from the Products table and has the where clause to filter the results to only include those results 
where the Price falls in the range of 10-20. This is seen by the BETWEEN operatory which gives the range for the Price, and so if 
the price is between 10 and 20, then those rows are included

Sample Output:
ProductID ProductName SupplierID CategoryID Unit Price
1  Chais  1  1  10 boxes x 20 bags  18 
2  Chang  1  1  24 - 12 oz bottles  19 
3  Aniseed Syrup  1  2  12 - 550 ml bottles  10 
15  Genen Shouyu  6  2  24 - 250 ml bottles  15.5 
16 Pavlova 7 3  32 - 500 g boxes 17.45 
21 Sir Rodney's Scones 8 3 24 pkgs. x 4 pieces 10 
25 NuNuCa Nuß-Nougat-Creme 11 3 20 - 450 g glasses  14 

Augmented:
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND ProductName LIKE 'c%';

I augmented the program to include another search condition to include those rows from the products table which don't just have a price 
of 10 to 20, but also have the ProductName column have a value that starts with c. 
If both of these conditions are true, then those rows are incldued in the result set.

-------Augmeted Sample Output:
ProductID ProductName SupplierID CategoryID Unit Price
1  Chais  1  1  10 boxes x 20 bags  18 
2  Chang  1  1  24 - 12 oz bottles  19 
39  Chartreuse verte  18  1  750 cc per bottle  18 
48  Chocolade  22  3  10 pkgs.  12.75 

_____________________________________________________________________________________________________________________________________
SQL Query from W3Schools https://www.w3schools.com/sql/func_sqlserver_iif.asp
--This query uses the IFF statement to label the quantity as either MORE or LESS in another column based on the Quantity itself

SELECT OrderID, Quantity, IIF(Quantity>10, 'MORE', 'LESS')
FROM OrderDetails;

This query selects the OrderID and Quantity columns from the OrderDetails table. It also has an IFF statement to give a column 
(that is unamed) the value 'MORE' if the condition Quantity>10 is true, and give
it the value 'LESS' if the condition is not true, meaning the Quantity is less than 10

----Sample Output:
OrderID Quantity
10248 12 MORE
10248 10 LESS
10248 5 LESS
10249 9 LESS
10249 40 MORE
10250 10 LESS
10250 35 MORE
10250 15 MORE

Aumented:
SELECT CustomerName, IIF(Country='USA', 'National', 'International')
FROM Customers;

I augmented this code to follow the same structure but based on the Customers table to figure out of the customer was national 
or international based on the value in the Country column of the Customers table. So here I select the CustomerName and then
have an IFF statement that evaluates if the Country column has a value of 'USA'. If it does, then a seperate column will get the value
'National'. Otherwise, that column will get the value 'International'.


-----Augmeted Sample Output:
CustomerName
Alfreds Futterkiste                International
Ana Trujillo Emparedados y helados International
Antonio Moreno Taquería            International
Around the Horn                    International
Berglunds snabbköp                 International
Blauer See Delikatessen            International
Blondel père et fils               International
Bólido Comidas preparadas          International
Bon app                            International

____________________________________________________________________________________________________________________________
SQL Query from W3Schools https://www.w3schools.com/sql/sql_between.asp
--This is another BETWEEN operator query but between 2 ProductName string values rather than numeric values

SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;

This query selects everything from the Products table where the ProductName column has values between 'Carnarvron Tigers' and 
'Mozzarella di Giovanni', and then the results are ordered by ProductName. Since the rows selected have ProductName values between
these two names, it basically means those results that fall alphabetically between those two names are included in the final result set

Sample Output:
ProductID ProductName SupplierID CategoryID Unit Price
18  Carnarvon Tigers  7  8  16 kg pkg.  62.5 
1  Chais  1  1  10 boxes x 20 bags  18 
2  Chang  1  1  24 - 12 oz bottles  19 
39  Chartreuse verte  18  1  750 cc per bottle 18  
4  Chef Anton's Cajun Seasoning  2  2  48 - 6 oz jars  22 
5  Chef Anton's Gumbo Mix  2  2  36 boxes  21.35 
48  Chocolade  22  3  10 pkgs.  12.75 
38  Côte de Blaye  18  1  12 - 75 cl bottles  263.5

Augmented:
SELECT * FROM Products
WHERE ProductName BETWEEN 'Escargots de Bourgogne ' AND 'Louisiana Hot Spiced Okra '
ORDER BY ProductName;

I augmented this code by changing the BETWEEN values from 'Carnarvon Tigers' AND 'Mozzarella di Giovanni' to 
'Escargots de Bourgogne ' AND 'Louisiana Hot Spiced Okra ' so now those rows that have a ProductName between those two
aphabetically will now be included in the final result set. 

-----Augmented Sample Output:
ProductName Price
Escargots de Bourgogne  13.25 
Filo Mix  7 
Fløtemysost  21.5 
Geitost  2.5 
Genen Shouyu  15.5 
Gnocchi di nonna Alice  38 
Gorgonzola Telino  12.5 
Grandma's Boysenberry Spread  25 
Gravad lax  26 
Guaraná Fantástica  4.5 
Gudbrandsdalsost  36 
Gula Malacca  19.45 

_______________________________________________________________________________________________________________________________
SQL Query from W3Schools https://www.w3schools.com/sql/sql_null_values.asp
--This query will select info for those Customers from the Customers table that have the Address column with NULL values, 
meaning those columns that do not have an Address listed

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

This query selects the CustomerName, ContactName, and Address columns from the Customers table but only those rows are 
selected that have A NULL value in the Address column.

------Sample Output:
CustomerName ContactName Address
*Notice how there are no results here...this means that there are no NULL values in the Address column

Augmented:
SELECT VendorName, VendorPhone
FROM Vendors
WHERE VendorPhone IS NULL;

I augmeted this code by using a different database: AP. Here I wanted those vendors that did not have a phone number listed. 
I selected the VendorName and VendorPhone columns from the Vendors table, only selecting those rows that have a NULL value for the 
VendorPhone column.

------Augmented Sample Output:
VendorName	                  VendorPhone
Register of Copyrights	         NULL
Towne Advertiser's Mailing Svcs	NULL
Golden Eagle Insurance Co	      NULL
ASC Signs	                      NULL
Internal Revenue Service	       NULL
Zee Medical Service Co	         NULL
Small Press               	     NULL
Costco	                         NULL
Nielson                        	NULL
Nat Assoc of College Stores	    NULL

_________________________________________________________________________________________________________________________
SQL Query from W3Schools https://www.w3schools.com/sql/func_sqlserver_difference.asp
--This query shows how similar two expresions are (in this case two words) by returning an integer from 0-4 to represent almost 
no similarity to really string similarity by the use of the DIFFERENCE function

SELECT DIFFERENCE('Juice','Banana');

This query will use the DIFFERENCE function on the expressions 'Juice' and 'Banana' to find out how similar 
they are. If they are very similar the integer returned by this query will be 4. If they are completely different with very little
similarity, then thr query wil return a 0. The range is from 0-4 depending on the similarity. Here it is 2.

----Sample output:
        2
        
Augmented Code:
SELECT DIFFERENCE('Ishi','Khushi');

I changed this code by changing the two values to compare to 'Ishi' and 'Khushi' to see how similar they were. It turns out they 
are more similar then the previous two values and thus the integer returned was a 3. 

------Augmented Sample Output:
       3
       
_____________________________________________________________________________________________________________________________________
       

